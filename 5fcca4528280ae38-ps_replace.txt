// ---- Created with 3Dmigoto v1.3.16 on Tue May 16 03:45:00 2023

// depth map is t1
// 5fcca4528280ae38

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[32];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = -cb0[30].xy + v1.xy;
  r1.xyz = t0.SampleLevel(s1_s, r0.xy, 0).xyz;
  r2.xyz = t2.SampleLevel(s0_s, v1.xy, 0).xyw;
  r3.xyzw = t1.Gather(s0_s, v1.xy).xyzw;

  float4 r7;
  r7.xyzw = r3.xyzw;

  r3.xyzw = cb0[21].zzzz * r3.xyzw + cb0[21].wwww;
  r0.z = cmp(0 < cb0[29].w);
  r4.xyzw = float4(1,1,1,1) / r3.xyzw;
  r5.xyzw = saturate(r4.xxyy * cb0[28].xzxz + cb0[28].ywyw);
  r5.xyzw = cb0[29].wwww * r5.xyzw;
  r4.xy = cmp(r5.yw < r5.xz);
  r4.xy = r4.xy ? r5.xz : -r5.yw;
  r3.xyzw = cb0[28].xxxx * r3.xyzw + cb0[28].yyyy;
  r3.xyzw = max(cb0[28].zzzz, r3.xyzw);
  r3.xyzw = min(cb0[28].wwww, r3.xyzw);
  r3.xy = r0.zz ? r4.xy : r3.xy;
  r4.xyzw = saturate(r4.zzww * cb0[28].xzxz + cb0[28].ywyw);
  r4.xyzw = cb0[29].wwww * r4.xyzw;
  r5.xy = cmp(r4.yw < r4.xz);
  r4.xy = r5.xy ? r4.xz : -r4.yw;
  r0.zw = r0.zz ? r4.xy : r3.zw;
  r1.w = min(r3.x, r3.y);
  r2.w = min(r0.z, r0.w);
  r1.w = min(r2.w, r1.w);
  r2.w = max(r3.x, r3.y);
  r0.z = max(r0.z, r0.w);
  r0.z = max(r2.w, r0.z);
  r0.w = cmp(0.5 >= r2.z);
  if (r0.w != 0) {
    r2.zw = -cb0[31].xy * float2(0.5,0.5) + r0.xy;
    r3.xyz = t0.SampleLevel(s1_s, r2.zw, 0).xyz;
    r0.xy = cb0[31].xy * float2(0.5,0.5) + r0.xy;
    r0.xyw = t0.SampleLevel(s1_s, r0.xy, 0).xyz;
    r2.xy = float2(-0.498039216,-0.498039216) + r2.xy;
    r2.zw = r2.xy + r2.xy;
    r2.zw = r2.zw * r2.zw;
    r4.xy = cmp(float2(0,0) < r2.xy);
    r2.xy = cmp(r2.xy < float2(0,0));
    r2.xy = (int2)-r4.xy + (int2)r2.xy;
    r2.xy = (int2)r2.xy;
    r4.xy = r2.zw * r2.xy;
    r3.w = dot(r4.xy, r4.xy);
    r3.w = sqrt(r3.w);
    r2.xy = -r2.zw * r2.xy + v1.xy;
    r4.xyz = t3.SampleLevel(s1_s, r2.xy, 0).xyz;
    r2.x = t4.SampleLevel(s1_s, r2.xy, 0).x;
    r2.x = -0.5 + r2.x;
    r2.yzw = r3.xyz + r0.xyw;
    r2.yzw = r2.yzw * float3(4,4,4) + -r1.xyz;
    r2.yzw = float3(0.142857,0.142857,0.142857) * r2.yzw;
    r2.y = dot(r2.yzw, float3(0.212672904,0.715152204,0.0721750036));
    r2.z = dot(r1.xyz, float3(0.212672904,0.715152204,0.0721750036));
    r5.xy = float2(80,6000) * r3.ww;
    r5.xy = min(float2(1,1), r5.xy);
    r2.w = r5.x * -3.75 + 4;
    r2.y = r2.y + -r2.z;
    r5.xzw = min(r0.xyw, r3.xyz);
    r5.xzw = -r2.www * abs(r2.yyy) + r5.xzw;
    r6.xyz = max(r3.xyz, r0.xyw);
    r2.yzw = r2.www * abs(r2.yyy) + r6.xyz;
    r4.xyz = max(r5.xzw, r4.xyz);
    r2.yzw = min(r4.xyz, r2.yzw);
    r3.w = cb0[30].w + -cb0[30].z;
    r3.w = r5.y * r3.w + cb0[30].z;
    r4.x = cmp(1 < abs(r1.w));
    r4.y = 1 / abs(r1.w);
    r4.x = r4.x ? r4.y : 1;
    r2.x = -r2.x * cb0[29].x + r1.w;
    r2.x = -abs(r2.x) * r4.x + 1;
    r2.x = max(0, r2.x);
    r2.x = r2.x * r3.w;
    r3.xyz = r3.xyz + r1.xyz;
    r0.xyw = r3.xyz + r0.xyw;
    r3.xyz = float3(0.333333343,0.333333343,0.333333343) * r0.xyw;
    r0.xyw = -r0.xyw * float3(0.333333343,0.333333343,0.333333343) + r2.yzw;
    r1.xyz = r2.xxx * r0.xyw + r3.xyz;
  }
  o1.x = r1.w * cb0[29].y + 0.5;
  o2.x = r0.z * cb0[29].y + 0.5;
  o0.xyz = r1.xyz;
  o0.w = 0;
  o1.yzw = float3(0,0,0);
  o2.yzw = float3(0,0,0);

  o2.x = r7.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Tue May 16 03:45:00 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 7
add r0.xy, v1.xyxx, -cb0[30].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t0.xyzw, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t2.xywz, s0, l(0.000000)
gather4_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t1.xyzw, s0.x
mad r3.xyzw, cb0[21].zzzz, r3.xyzw, cb0[21].wwww
lt r0.z, l(0.000000), cb0[29].w
div r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r3.xyzw
mad_sat r5.xyzw, r4.xxyy, cb0[28].xzxz, cb0[28].ywyw
mul r5.xyzw, r5.xyzw, cb0[29].wwww
lt r4.xy, r5.ywyy, r5.xzxx
movc r4.xy, r4.xyxx, r5.xzxx, -r5.ywyy
mad r3.xyzw, cb0[28].xxxx, r3.xyzw, cb0[28].yyyy
max r3.xyzw, r3.xyzw, cb0[28].zzzz
min r3.xyzw, r3.xyzw, cb0[28].wwww
movc r3.xy, r0.zzzz, r4.xyxx, r3.xyxx
mad_sat r4.xyzw, r4.zzww, cb0[28].xzxz, cb0[28].ywyw
mul r4.xyzw, r4.xyzw, cb0[29].wwww
lt r5.xy, r4.ywyy, r4.xzxx
movc r4.xy, r5.xyxx, r4.xzxx, -r4.ywyy
movc r0.zw, r0.zzzz, r4.xxxy, r3.zzzw
min r1.w, r3.y, r3.x
min r2.w, r0.w, r0.z
min r1.w, r1.w, r2.w
max r2.w, r3.y, r3.x
max r0.z, r0.w, r0.z
max r0.z, r0.z, r2.w
ge r0.w, l(0.500000), r2.z
if_nz r0.w
  mad r2.zw, -cb0[31].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), r0.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r2.zwzz, t0.xyzw, s1, l(0.000000)
  mad r0.xy, cb0[31].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), r0.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r0.xyw, r0.xyxx, t0.xywz, s1, l(0.000000)
  add r2.xy, r2.xyxx, l(-0.498039216, -0.498039216, 0.000000, 0.000000)
  add r2.zw, r2.xxxy, r2.xxxy
  mul r2.zw, r2.zzzw, r2.zzzw
  lt r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xyxx
  lt r2.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r2.xy, -r4.xyxx, r2.xyxx
  itof r2.xy, r2.xyxx
  mul r4.xy, r2.xyxx, r2.zwzz
  dp2 r3.w, r4.xyxx, r4.xyxx
  sqrt r3.w, r3.w
  mad r2.xy, -r2.zwzz, r2.xyxx, v1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t3.xyzw, s1, l(0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t4.xyzw, s1, l(0.000000)
  add r2.x, r2.x, l(-0.500000)
  add r2.yzw, r0.xxyw, r3.xxyz
  mad r2.yzw, r2.yyzw, l(0.000000, 4.000000, 4.000000, 4.000000), -r1.xxyz
  mul r2.yzw, r2.yyzw, l(0.000000, 0.142857, 0.142857, 0.142857)
  dp3 r2.y, r2.yzwy, l(0.212672904, 0.715152204, 0.072175, 0.000000)
  dp3 r2.z, r1.xyzx, l(0.212672904, 0.715152204, 0.072175, 0.000000)
  mul r5.xy, r3.wwww, l(80.000000, 6000.000000, 0.000000, 0.000000)
  min r5.xy, r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  mad r2.w, r5.x, l(-3.750000), l(4.000000)
  add r2.y, -r2.z, r2.y
  min r5.xzw, r3.xxyz, r0.xxyw
  mad r5.xzw, -r2.wwww, |r2.yyyy|, r5.xxzw
  max r6.xyz, r0.xywx, r3.xyzx
  mad r2.yzw, r2.wwww, |r2.yyyy|, r6.xxyz
  max r4.xyz, r4.xyzx, r5.xzwx
  min r2.yzw, r2.yyzw, r4.xxyz
  add r3.w, -cb0[30].z, cb0[30].w
  mad r3.w, r5.y, r3.w, cb0[30].z
  lt r4.x, l(1.000000), |r1.w|
  div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), |r1.w|
  movc r4.x, r4.x, r4.y, l(1.000000)
  mad r2.x, -r2.x, cb0[29].x, r1.w
  mad r2.x, -|r2.x|, r4.x, l(1.000000)
  max r2.x, r2.x, l(0.000000)
  mul r2.x, r3.w, r2.x
  add r3.xyz, r1.xyzx, r3.xyzx
  add r0.xyw, r0.xyxw, r3.xyxz
  mul r3.xyz, r0.xywx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
  mad r0.xyw, -r0.xyxw, l(0.333333343, 0.333333343, 0.000000, 0.333333343), r2.yzyw
  mad r1.xyz, r2.xxxx, r0.xywx, r3.xyzx
endif
mad o1.x, r1.w, cb0[29].y, l(0.500000)
mad o2.x, r0.z, cb0[29].y, l(0.500000)
mov o0.xyz, r1.xyzx
mov o0.w, l(0)
mov o1.yzw, l(0,0,0,0)
mov o2.yzw, l(0,0,0,0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
